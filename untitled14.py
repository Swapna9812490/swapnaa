# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UDSJNhdCfPExFbcQGMipapkaP5Cxxjok
"""

pip install transformers

#task1
from transformers import pipeline

# Load pre-trained summarization model
summarizer = pipeline("summarization")

# Sample input text
text = """
Artificial Intelligence is revolutionizing many industries including healthcare,
finance, and education. By automating processes and analyzing large amounts of
data, AI enables faster and more accurate decision-making, saving time and resources.
"""

# Generate summary
summary = summarizer(text, max_length=50, min_length=20, do_sample=False)
print("Summary:\n", summary[0]['summary_text'])

pip install SpeechRecognition

#task 2
import speech_recognition as sr

recognizer = sr.Recognizer()

# Make sure 'audio.wav' is in the same folder
with sr.AudioFile('audio.wav') as source:
    audio = recognizer.record(source)

try:
    text = recognizer.recognize_google(audio)
    print("Transcription:\n", text)
except sr.UnknownValueError:
    print("Could not understand the audio.")
except sr.RequestError:
    print("Service is unreachable. Check internet.")

#task 3
 !pip install torch torchvision pillow matplotlib

# Step 1: Download sample images
import urllib.request

urllib.request.urlretrieve(
    "https://pytorch.org/tutorials/_static/img/neural-style/picasso.jpg", "style.jpg")
urllib.request.urlretrieve(
    "https://pytorch.org/tutorials/_static/img/neural-style/dancing.jpg", "content.jpg")

# Step 2: Load and display images
import torch
import torchvision.transforms as transforms
from PIL import Image
import matplotlib.pyplot as plt

def load_image(path, max_size=400):
    image = Image.open(path).convert('RGB')
    transform = transforms.Compose([
        transforms.Resize((max_size, max_size)),
        transforms.ToTensor()
    ])
    return transform(image).unsqueeze(0)

# Load content and style images
content = load_image('content.jpg')
style = load_image('style.jpg')

# Display content image
plt.imshow(content.squeeze(0).permute(1, 2, 0))
plt.title("Content Image")
plt.axis("off")
plt.show()

# Display style image
plt.imshow(style.squeeze(0).permute(1, 2, 0))
plt.title("Style Image")
plt.axis("off")
plt.show()

import torch
import torchvision.transforms as transforms
from PIL import Image
import matplotlib.pyplot as plt

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

def load_image(image_path, max_size=400):
    image = Image.open(image_path).convert("RGB")
    transform = transforms.Compose([
        transforms.Resize((max_size, max_size)),
        transforms.ToTensor()
    ])
    return transform(image).unsqueeze(0).to(device)

# Load content and style images
content_img = load_image("content.jpg")
style_img = load_image("style.jpg")

# Show images
def imshow(tensor, title=None):
    image = tensor.cpu().clone().squeeze(0)
    image = transforms.ToPILImage()(image)
    plt.imshow(image)
    if title:
        plt.title(title)
    plt.axis('off')
    plt.show()

imshow(content_img, "Content Image")
imshow(style_img, "Style Image")

import torchvision.models as models
import torch.nn as nn

# Load pre-trained VGG19
vgg = models.vgg19(pretrained=True).features.to(device).eval()

# Freeze all layers
for param in vgg.parameters():
    param.requires_grad_(False)

# Extract features from specific layers
def get_features(image, model):
    layers = {
        '0': 'conv1_1',
        '5': 'conv2_1',
        '10': 'conv3_1',
        '19': 'conv4_1',
        '21': 'conv4_2',  # content
        '28': 'conv5_1'
    }
    features = {}
    x = image
    for name, layer in model._modules.items():
        x = layer(x)
        if name in layers:
            features[layers[name]] = x
    return features

# Compute Gram Matrix
def gram_matrix(tensor):
    _, d, h, w = tensor.size()
    tensor = tensor.view(d, h * w)
    gram = torch.mm(tensor, tensor.t())
    return gram

# Get features
content_features = get_features(content_img, vgg)
style_features = get_features(style_img, vgg)

# Compute style Gram matrices
style_grams = {layer: gram_matrix(style_features[layer]) for layer in style_features}

# Initialize target image
target = content_img.clone().requires_grad_(True).to(device)

# Style transfer settings
style_weights = {
    'conv1_1': 1.0,
    'conv2_1': 0.75,
    'conv3_1': 0.2,
    'conv4_1': 0.2,
    'conv5_1': 0.1
}
content_weight = 1e4
style_weight = 1e2

# Optimizer
optimizer = torch.optim.Adam([target], lr=0.003)
steps = 300  # iterations

for i in range(steps):
    target_features = get_features(target, vgg)

    # Content loss
    content_loss = torch.mean((target_features['conv4_2'] - content_features['conv4_2'])**2)

    # Style loss
    style_loss = 0
    for layer in style_weights:
        target_gram = gram_matrix(target_features[layer])
        style_gram = style_grams[layer]
        layer_loss = style_weights[layer] * torch.mean((target_gram - style_gram)**2)
        style_loss += layer_loss

    total_loss = content_weight * content_loss + style_weight * style_loss

    optimizer.zero_grad()
    total_loss.backward()
    optimizer.step()

    if i % 50 == 0:
        print(f"Step {i}, Total Loss: {total_loss.item():.4f}")

imshow(target, "Stylized Output")

# task 4
!pip install transformers

from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Load GPT-2 model and tokenizer
model_name = "gpt2"
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

def generate_text(prompt, max_length=100, temperature=0.7):
    inputs = tokenizer.encode(prompt, return_tensors="pt")
    outputs = model.generate(
        inputs,
        max_length=max_length,
        do_sample=True,
        temperature=temperature,
        top_k=50,
        top_p=0.95,
        num_return_sequences=1
    )
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Provide a custom prompt
prompt_text =  "Swapna is an AI developer working on a project involving machine learning and neural networks. She is currently focused on"

# Generate text
generated_output = generate_text(prompt_text)

print("üìù Generated Text:\n")
print(generated_output)